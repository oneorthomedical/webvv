!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t){e.exports={fps:30,interpolation:0,interpolationNM:0,autoIntensity:!1,bgColor:65280,bgAlpha:0,rightClickAllowed:!1,zoomSpeed:1.1,zoomInIsWheelDown:!0,stackTopIsWheelDown:!0,zoomIn:"+",zoomIn2:"i",zoomOut:"-",zoomOut2:"o",zoomHold:17,stackUp:"ArrowUp",stackDown:"ArrowDown",mouseClickProbe:1,mouseClickPan:2,mouseClickWindow:3,resetCamera:"r"}},function(e,t,n){"use strict";n.r(t);class o{constructor(){this._name="shadersBase",this._base={_functions:{},_uniforms:{}},this._definition=""}get name(){return this._name}set name(e){this._name=e}}var a=new class extends o{constructor(){super(),this.name="unpack",this._packedData="packedData",this._offset="offset",this._unpackedData="unpackedData",this._base._uniforms={uNumberOfChannels:{value:1},uBitsAllocated:{value:16},uPixelType:{value:0}}}api(e=this._base,t=this._packedData,n=this._offset,o=this._unpackedData){return this._base=e,this.compute(t,n,o)}compute(e,t,n){return this.computeDefinition(),this._base._functions[this._name]=this._definition,`${this._name}(${e}, ${t}, ${n});`}computeDefinition(){let e="";if(1===this._base._uniforms.uNumberOfChannels.value)switch(this._base._uniforms.uBitsAllocated.value){case 1:case 8:e=this.upack8();break;case 16:e=this.upack16();break;case 32:e=this.upack32();break;default:e=this.upackIdentity()}else e=this.upackIdentity();this._definition=`\nvoid ${this._name}(in vec4 packedData, in int offset, out vec4 unpackedData){\n\n${e}\n\n}  \n    `}upack8(){return this._base._functions.uInt8=this.uInt8(),"\nuInt8(\n  step( abs( float(offset - 0) ), 0.0 ) * packedData.r +\n  step( abs( float(offset - 1) ), 0.0 ) * packedData.g +\n  step( abs( float(offset - 2) ), 0.0 ) * packedData.b +\n  step( abs( float(offset - 3) ), 0.0 ) * packedData.a\n  ,\n  unpackedData.x);\n    "}upack16(){return this._base._functions.uInt16=this.uInt16(),"\nuInt16(\n  packedData.r * float( 1 - offset) + packedData.b * float(offset),\n  packedData.g * float( 1 - offset) + packedData.a * float(offset),\n  unpackedData.x);\n    "}upack32(){return 0===this._base._uniforms.uPixelType.value?(this._base._functions.uInt32=this.uInt32(),"\nuInt32(\n  packedData.r,\n  packedData.g,\n  packedData.b,\n  packedData.a,\n  unpackedData.x);\n      "):(this._base._functions.uFloat32=this.uFloat32(),"\nuFloat32(\n  packedData.r,\n  packedData.g,\n  packedData.b,\n  packedData.a,\n  unpackedData.x);\n      ")}upackIdentity(){return"\nunpackedData = packedData;\n      "}uInt8(){return"\nvoid uInt8(in float r, out float value){\n  value = r * 255.;\n}\n    "}uInt16(){return"\nvoid uInt16(in float r, in float a, out float value){\n  value = r * 255. + a * 255. * 256.;\n}\n    "}uInt32(){return"\nvoid uInt32(in float r, in float g, in float b, in float a, out float value){\n  value = r * 255. + g * 255. * 256. + b * 255. * 256. * 256. + a * 255. * 256. * 256. * 256.;\n  // value = r * 255. + g * 65025. + b * 16581375. + a * 4228250625.;\n}\n    "}uFloat32(){return"\nvoid uFloat32(in float r, in float g, in float b, in float a, out float value){\n\n  // create arrays containing bits for rgba values\n  // value between 0 and 255\n  value = r * 255.;\n  int bytemeR[8];\n  bytemeR[0] = int(floor(value / 128.));\n  value -= float(bytemeR[0] * 128);\n  bytemeR[1] = int(floor(value / 64.));\n  value -= float(bytemeR[1] * 64);\n  bytemeR[2] = int(floor(value / 32.));\n  value -= float(bytemeR[2] * 32);\n  bytemeR[3] = int(floor(value / 16.));\n  value -= float(bytemeR[3] * 16);\n  bytemeR[4] = int(floor(value / 8.));\n  value -= float(bytemeR[4] * 8);\n  bytemeR[5] = int(floor(value / 4.));\n  value -= float(bytemeR[5] * 4);\n  bytemeR[6] = int(floor(value / 2.));\n  value -= float(bytemeR[6] * 2);\n  bytemeR[7] = int(floor(value));\n\n  value = g * 255.;\n  int bytemeG[8];\n  bytemeG[0] = int(floor(value / 128.));\n  value -= float(bytemeG[0] * 128);\n  bytemeG[1] = int(floor(value / 64.));\n  value -= float(bytemeG[1] * 64);\n  bytemeG[2] = int(floor(value / 32.));\n  value -= float(bytemeG[2] * 32);\n  bytemeG[3] = int(floor(value / 16.));\n  value -= float(bytemeG[3] * 16);\n  bytemeG[4] = int(floor(value / 8.));\n  value -= float(bytemeG[4] * 8);\n  bytemeG[5] = int(floor(value / 4.));\n  value -= float(bytemeG[5] * 4);\n  bytemeG[6] = int(floor(value / 2.));\n  value -= float(bytemeG[6] * 2);\n  bytemeG[7] = int(floor(value));\n\n  value = b * 255.;\n  int bytemeB[8];\n  bytemeB[0] = int(floor(value / 128.));\n  value -= float(bytemeB[0] * 128);\n  bytemeB[1] = int(floor(value / 64.));\n  value -= float(bytemeB[1] * 64);\n  bytemeB[2] = int(floor(value / 32.));\n  value -= float(bytemeB[2] * 32);\n  bytemeB[3] = int(floor(value / 16.));\n  value -= float(bytemeB[3] * 16);\n  bytemeB[4] = int(floor(value / 8.));\n  value -= float(bytemeB[4] * 8);\n  bytemeB[5] = int(floor(value / 4.));\n  value -= float(bytemeB[5] * 4);\n  bytemeB[6] = int(floor(value / 2.));\n  value -= float(bytemeB[6] * 2);\n  bytemeB[7] = int(floor(value));\n\n  value = a * 255.;\n  int bytemeA[8];\n  bytemeA[0] = int(floor(value / 128.));\n  value -= float(bytemeA[0] * 128);\n  bytemeA[1] = int(floor(value / 64.));\n  value -= float(bytemeA[1] * 64);\n  bytemeA[2] = int(floor(value / 32.));\n  value -= float(bytemeA[2] * 32);\n  bytemeA[3] = int(floor(value / 16.));\n  value -= float(bytemeA[3] * 16);\n  bytemeA[4] = int(floor(value / 8.));\n  value -= float(bytemeA[4] * 8);\n  bytemeA[5] = int(floor(value / 4.));\n  value -= float(bytemeA[5] * 4);\n  bytemeA[6] = int(floor(value / 2.));\n  value -= float(bytemeA[6] * 2);\n  bytemeA[7] = int(floor(value));\n\n  // compute float32 value from bit arrays\n\n  // sign\n  int issigned = 1 - 2 * bytemeR[0];\n  //   issigned = int(pow(-1., float(bytemeR[0])));\n\n  // exponent\n  int exponent = 0;\n\n  exponent += bytemeR[1] * int(pow(2., 7.));\n  exponent += bytemeR[2] * int(pow(2., 6.));\n  exponent += bytemeR[3] * int(pow(2., 5.));\n  exponent += bytemeR[4] * int(pow(2., 4.));\n  exponent += bytemeR[5] * int(pow(2., 3.));\n  exponent += bytemeR[6] * int(pow(2., 2.));\n  exponent += bytemeR[7] * int(pow(2., 1.));\n\n  exponent += bytemeG[0];\n\n\n  // fraction\n  float fraction = 0.;\n\n  fraction = float(bytemeG[1]) * pow(2., -1.);\n  fraction += float(bytemeG[2]) * pow(2., -2.);\n  fraction += float(bytemeG[3]) * pow(2., -3.);\n  fraction += float(bytemeG[4]) * pow(2., -4.);\n  fraction += float(bytemeG[5]) * pow(2., -5.);\n  fraction += float(bytemeG[6]) * pow(2., -6.);\n  fraction += float(bytemeG[7]) * pow(2., -7.);\n\n  fraction += float(bytemeB[0]) * pow(2., -8.);\n  fraction += float(bytemeB[1]) * pow(2., -9.);\n  fraction += float(bytemeB[2]) * pow(2., -10.);\n  fraction += float(bytemeB[3]) * pow(2., -11.);\n  fraction += float(bytemeB[4]) * pow(2., -12.);\n  fraction += float(bytemeB[5]) * pow(2., -13.);\n  fraction += float(bytemeB[6]) * pow(2., -14.);\n  fraction += float(bytemeB[7]) * pow(2., -15.);\n\n  fraction += float(bytemeA[0]) * pow(2., -16.);\n  fraction += float(bytemeA[1]) * pow(2., -17.);\n  fraction += float(bytemeA[2]) * pow(2., -18.);\n  fraction += float(bytemeA[3]) * pow(2., -19.);\n  fraction += float(bytemeA[4]) * pow(2., -20.);\n  fraction += float(bytemeA[5]) * pow(2., -21.);\n  fraction += float(bytemeA[6]) * pow(2., -22.);\n  fraction += float(bytemeA[7]) * pow(2., -23.);\n\n  value = float(issigned) * pow( 2., float(exponent - 127)) * (1. + fraction);\n}\n    "}};var i=new class extends o{constructor(){super(),this.name="texture3d",this._dataCoordinates="dataCoordinates",this._dataValue="dataValue",this._offset="offset"}api(e=this._base,t=this._dataCoordinates,n=this._dataValue,o=this._offset){return this._base=e,this.compute(t,n,o)}compute(e,t,n){return this.computeDefinition(),this._base._functions[this._name]=this._definition,`${this._name}(${e}, ${t}, ${n});`}computeDefinition(){this._definition=`\nvoid ${this._name}(in ivec3 dataCoordinates, out vec4 dataValue, out int offset){\n    \n  int index = dataCoordinates.x\n            + dataCoordinates.y * uDataDimensions.x\n            + dataCoordinates.z * uDataDimensions.y * uDataDimensions.x;\n  int indexP = int(index/uPackedPerPixel);\n  offset = index - int(uPackedPerPixel)*indexP;\n\n  // Map data index to right sampler2D texture\n  int voxelsPerTexture = uTextureSize*uTextureSize;\n  int textureIndex = int(floor(float(indexP) / float(voxelsPerTexture)));\n  // modulo seems incorrect sometimes...\n  // int inTextureIndex = int(mod(float(index), float(textureSize*textureSize)));\n  int inTextureIndex = indexP - voxelsPerTexture*textureIndex;\n  float textureIndexF = float(textureIndex);\n\n  // Get row and column in the texture\n  int colIndex = int(mod(float(inTextureIndex), float(uTextureSize)));\n  int rowIndex = int(floor(float(inTextureIndex)/float(uTextureSize)));\n\n  // Map row and column to uv\n  vec2 uv = vec2(0,0);\n  uv.x = (0.5 + float(colIndex)) / float(uTextureSize);\n  uv.y = 1. - (0.5 + float(rowIndex)) / float(uTextureSize);\n\n  // get rid of if statements\n  dataValue = vec4(0.) +\n    step( abs( textureIndexF - 0.0 ), 0.0 ) * texture2D(uTextureContainer[0], uv) +\n    step( abs( textureIndexF - 1.0 ), 0.0 ) * texture2D(uTextureContainer[1], uv) +\n    step( abs( textureIndexF - 2.0 ), 0.0 ) * texture2D(uTextureContainer[2], uv) +\n    step( abs( textureIndexF - 3.0 ), 0.0 ) * texture2D(uTextureContainer[3], uv) +\n    step( abs( textureIndexF - 4.0 ), 0.0 ) * texture2D(uTextureContainer[4], uv) +\n    step( abs( textureIndexF - 5.0 ), 0.0 ) * texture2D(uTextureContainer[5], uv) +\n    step( abs( textureIndexF - 6.0 ), 0.0 ) * texture2D(uTextureContainer[6], uv);\n\n}\n    `}};var r=new class extends o{constructor(){super(),this.name="interpolationIdentity",this._currentVoxel="currentVoxel",this._dataValue="dataValue"}api(e=this._base,t=this._currentVoxel,n=this._dataValue){return this._base=e,this.compute(t,n)}compute(e,t){return this.computeDefinition(),this._base._functions[this._name]=this._definition,`${this._name}(${e}, ${t});`}computeDefinition(){this._definition=`\nvoid ${this._name}(in vec3 currentVoxel, out vec4 dataValue){\n  // lower bound\n  vec3 rcurrentVoxel = vec3(floor(currentVoxel.x + 0.5 ), floor(currentVoxel.y + 0.5 ), floor(currentVoxel.z + 0.5 ));\n  ivec3 voxel = ivec3(int(rcurrentVoxel.x), int(rcurrentVoxel.y), int(rcurrentVoxel.z));\n\n  vec4 tmp = vec4(0., 0., 0., 0.);\n  int offset = 0;\n\n  ${i.api(this._base,"voxel","tmp","offset")}\n  ${a.api(this._base,"tmp","offset","dataValue")}\n}\n    `}};var l=new class extends o{constructor(){super(),this.name="interpolationTrilinear",this._currentVoxel="currentVoxel",this._dataValue="dataValue",this._gradient="gradient"}api(e=this._base,t=this._currentVoxel,n=this._dataValue,o=this._gradient){return this._base=e,this.compute(t,n,o)}compute(e,t,n){return this.computeDefinition(),this._base._functions[this._name]=this._definition,`${this._name}(${e}, ${t}, ${n});`}computeDefinition(){this._definition=`\nvoid trilinearInterpolation(\n  in vec3 normalizedPosition,\n  out vec4 interpolatedValue,\n  in vec4 v000, in vec4 v100,\n  in vec4 v001, in vec4 v101,\n  in vec4 v010, in vec4 v110,\n  in vec4 v011, in vec4 v111) {\n\n  // https://en.wikipedia.org/wiki/Trilinear_interpolation\n\n  vec4 c00 = v000 * ( 1.0 - normalizedPosition.x ) + v100 * normalizedPosition.x;\n  vec4 c01 = v001 * ( 1.0 - normalizedPosition.x ) + v101 * normalizedPosition.x;\n  vec4 c10 = v010 * ( 1.0 - normalizedPosition.x ) + v110 * normalizedPosition.x;\n  vec4 c11 = v011 * ( 1.0 - normalizedPosition.x ) + v111 * normalizedPosition.x;\n\n  // c0 and c1\n  vec4 c0 = c00 * ( 1.0 - normalizedPosition.y) + c10 * normalizedPosition.y;\n  vec4 c1 = c01 * ( 1.0 - normalizedPosition.y) + c11 * normalizedPosition.y;\n\n  // c\n  vec4 c = c0 * ( 1.0 - normalizedPosition.z) + c1 * normalizedPosition.z;\n  interpolatedValue = c;\n}\n\nvoid ${this._name}(in vec3 currentVoxel, out vec4 dataValue, out vec3 gradient){\n\n  vec3 lower_bound = floor(currentVoxel);\n  if(lower_bound.x < 0.){\n    lower_bound.x = 0.;\n  }\n  if(lower_bound.y < 0.){\n    lower_bound.y = 0.;\n  }\n  if(lower_bound.z < 0.){\n    lower_bound.z = 0.;\n  }\n  \n  vec3 higher_bound = lower_bound + vec3(1.);\n  vec3 normalizedPosition = (currentVoxel - lower_bound);\n  vec4 interpolatedValue = vec4(0.);\n\n  //\n  // fetch values required for interpolation\n  //\n  vec4 v000 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c000 = vec3(lower_bound.x, lower_bound.y, lower_bound.z);\n  ${r.api(this._base,"c000","v000")}\n\n  //\n  vec4 v100 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c100 = vec3(higher_bound.x, lower_bound.y, lower_bound.z);\n  ${r.api(this._base,"c100","v100")}\n\n  //\n  vec4 v001 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c001 = vec3(lower_bound.x, lower_bound.y, higher_bound.z);\n  ${r.api(this._base,"c001","v001")}\n\n  //\n  vec4 v101 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c101 = vec3(higher_bound.x, lower_bound.y, higher_bound.z);\n  ${r.api(this._base,"c101","v101")}\n  \n  //\n  vec4 v010 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c010 = vec3(lower_bound.x, higher_bound.y, lower_bound.z);\n  ${r.api(this._base,"c010","v010")}\n\n  vec4 v110 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c110 = vec3(higher_bound.x, higher_bound.y, lower_bound.z);\n  ${r.api(this._base,"c110","v110")}\n\n  //\n  vec4 v011 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c011 = vec3(lower_bound.x, higher_bound.y, higher_bound.z);\n  ${r.api(this._base,"c011","v011")}\n\n  vec4 v111 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c111 = vec3(higher_bound.x, higher_bound.y, higher_bound.z);\n  ${r.api(this._base,"c111","v111")}\n\n  // compute interpolation at position\n  trilinearInterpolation(normalizedPosition, interpolatedValue ,v000, v100, v001, v101, v010,v110, v011,v111);\n  dataValue = interpolatedValue;\n\n  // compute gradient\n  float gradientStep = 0.005;\n\n  // x axis\n  vec3 g100 = vec3(1., 0., 0.);\n  vec3 ng100 = normalizedPosition + g100 * gradientStep;\n  if (ng100.x > 1.) {\n    ng100.x = 1.;\n  }\n  vec4 vg100 = vec4(0.);\n  trilinearInterpolation(ng100, vg100 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  vec3 go100 = -g100;\n  vec3 ngo100 = normalizedPosition + go100 * gradientStep;\n  if (ngo100.x < 0.) {\n    ngo100.x = 0.;\n  }\n  vec4 vgo100 = vec4(0.);\n  trilinearInterpolation(ngo100, vgo100 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  gradient.x = (g100.x * vg100.x + go100.x * vgo100.x);\n\n  // y axis\n  vec3 g010 = vec3(0., 1., 0.);\n  vec3 ng010 = normalizedPosition + g010 * gradientStep;\n  if (ng010.y > 1.) {\n    ng010.y = 1.;\n  }\n  vec4 vg010 = vec4(0.);\n  trilinearInterpolation(ng010, vg010 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  vec3 go010 = -g010;\n  vec3 ngo010 = normalizedPosition + go010 * gradientStep;\n  if (ngo010.y < 0.) {\n    ngo010.y = 0.;\n  }\n  vec4 vgo010 = vec4(0.);\n  trilinearInterpolation(ngo010, vgo010 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  gradient.y = (g010.y * vg010.x + go010.y * vgo010.x);\n\n  // z axis\n  vec3 g001 = vec3(0., 0., 1.);\n  vec3 ng001 = normalizedPosition + g001 * gradientStep;\n  if (ng001.z > 1.) {\n    ng001.z = 1.;\n  }\n  vec4 vg001 = vec4(0.);\n  trilinearInterpolation(ng001, vg001 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  vec3 go001 = -g001;\n  vec3 ngo001 = normalizedPosition + go001 * gradientStep;\n  if (ngo001.z < 0.) {\n    ngo001.z = 0.;\n  }\n  vec4 vgo001 = vec4(0.);\n  trilinearInterpolation(ngo001, vgo001 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  gradient.z = (g001.z * vg001.x + go001.z * vgo001.x);\n\n  // normalize gradient\n  float gradientMagnitude = length(gradient);\n  if (gradientMagnitude > 0.0) {\n    gradient = -(1. / gradientMagnitude) * gradient;\n  }\n}\n    `}};var s=function(e,t,n,o){switch(e._uniforms.uInterpolation.value){case 0:return r.api(e,t,n);case 1:return l.api(e,t,n,o);default:return r.api(e,t,n)}};n.d(t,"default",function(){return u});class u{constructor(e){this._uniforms=e,this._functions={},this._main=""}functions(){""===this._main&&this.main();let e="";for(let t in this._functions)e+=this._functions[t]+"\n";return e}uniforms(){let e="";for(let t in this._uniforms){let n=this._uniforms[t];e+=`uniform ${n.typeGLSL} ${t}`,n&&n.length&&(e+=`[${n.length}]`),e+=";\n"}return e}main(){this._main=`\nvoid main(void) {\n\n  // draw border if slice is cropped\n  // float uBorderDashLength = 10.;\n\n  if( uCanvasWidth > 0. &&\n      ((gl_FragCoord.x > uBorderMargin && (gl_FragCoord.x - uBorderMargin) < uBorderWidth) ||\n       (gl_FragCoord.x < (uCanvasWidth - uBorderMargin) && (gl_FragCoord.x + uBorderMargin) > (uCanvasWidth - uBorderWidth) ))){\n    float valueY = mod(gl_FragCoord.y, 2. * uBorderDashLength);\n    if( valueY < uBorderDashLength && gl_FragCoord.y > uBorderMargin && gl_FragCoord.y < (uCanvasHeight - uBorderMargin) ){\n      gl_FragColor = vec4(uBorderColor, 1.);\n      return;\n    }\n  }\n\n  if( uCanvasHeight > 0. &&\n      ((gl_FragCoord.y > uBorderMargin && (gl_FragCoord.y - uBorderMargin) < uBorderWidth) ||\n       (gl_FragCoord.y < (uCanvasHeight - uBorderMargin) && (gl_FragCoord.y + uBorderMargin) > (uCanvasHeight - uBorderWidth) ))){\n    float valueX = mod(gl_FragCoord.x, 2. * uBorderDashLength);\n    if( valueX < uBorderDashLength && gl_FragCoord.x > uBorderMargin && gl_FragCoord.x < (uCanvasWidth - uBorderMargin) ){\n      gl_FragColor = vec4(uBorderColor, 1.);\n      return;\n    }\n  }\n\n  // get texture coordinates of current pixel\n  vec4 dataCoordinates = uWorldToData * ( vec4(uOffset,0) + vPos);\n  vec3 currentVoxel = dataCoordinates.xyz ;\n  vec4 dataValue = vec4(0., 0., 0., 0.);\n  vec3 gradient = vec3(0., 0., 0.);\n  ${s(this,"currentVoxel","dataValue","gradient")}\n\n  // how do we deal wil more than 1 channel?\n  float intensity = dataValue.r;\n  if(uNumberOfChannels == 1){\n    float normalizedIntensity = dataValue.r;\n\n    // rescale/slope\n    normalizedIntensity =\n      normalizedIntensity*uRescaleSlopeIntercept[0] + uRescaleSlopeIntercept[1];\n    if ( normalizedIntensity < uLowerUpperThreshold[0] ||\n      normalizedIntensity > uLowerUpperThreshold[1]) {\n      discard;\n    }\n    float windowMin = uWindowCenterWidth[0] - uWindowCenterWidth[1] * 0.5;\n    normalizedIntensity =\n      ( normalizedIntensity - windowMin ) / uWindowCenterWidth[1];\n\n    dataValue.r = dataValue.g = dataValue.b = normalizedIntensity;\n\n    dataValue.a = step(normalizedIntensity, 0.);\n  }\n\n  // Apply LUT table...\n  //\n  if(uLut == 1){\n    // should opacity be grabbed there?\n    dataValue = texture2D( uTextureLUT, vec2( dataValue.r , 1.0) );\n  }\n\n  if(uLutSegmentation == 1){\n    // should opacity be grabbed there?\n    //\n    float textureWidth = 256.;\n    float textureHeight = 128.;\n    float min = 0.;\n    // start at 0!\n    int adjustedIntensity = int(floor(intensity + 0.5));\n\n    // Get row and column in the texture\n    int colIndex = int(mod(float(adjustedIntensity), textureWidth));\n    int rowIndex = int(floor(float(adjustedIntensity)/textureWidth));\n\n    float texWidth = 1./textureWidth;\n    float texHeight = 1./textureHeight;\n\n    // Map row and column to uv\n    vec2 uv = vec2(0,0);\n    uv.x = 0.5 * texWidth + (texWidth * float(colIndex));\n    uv.y = 1. - (0.5 * texHeight + float(rowIndex) * texHeight);\n\n    dataValue = texture2D( uTextureLUTSegmentation, uv );\n    // uv.x = (0.5 + float(colIndex)) / textureWidth;\n    // uv.y = 1. - (0.5 + float(rowIndex)) / textureHeight;\n    // dataValue = texture2D( uTextureLUTSegmentation, uv );\n  }\n\n  if(uInvert == 1){\n    dataValue = vec4(1.) - dataValue;\n    // how do we deal with that and opacity?\n    dataValue.a = 1.;\n  }\n\n  gl_FragColor = dataValue;\n\n    // if on edge, draw line\n  // float xPos = gl_FragCoord.x/512.;\n  // float yPos = gl_FragCoord.y/512.;\n  // if( xPos < 0.05 || xPos > .95 || yPos < 0.05 || yPos > .95){\n  //   gl_FragColor = vec4(xPos, yPos, 0., 1.);//dataValue;\n  //   //return;\n  // }\n\n}\n   `}compute(){return`\n// uniforms\n${this.uniforms()}\n\n// varying (should fetch it from vertex directly)\nvarying vec4      vPos;\n\n// tailored functions\n${this.functions()}\n\n// main loop\n${this._main}\n      `}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});class o{constructor(e,t="default",n="linear",o=[[0,0,0,0],[1,1,1,1]],a=[[0,0],[1,1]],i=!1){AMI.UtilsCore.isString(e)?this._dom=document.getElementById(e):this._dom=e,this._discrete=i,this._color=o,this._lut=t,this._luts={[t]:o},this._opacity=a,this._lutO=n,this._lutsO={[n]:a},this.initCanvas(),this.paintCanvas()}initCanvas(){this._canvasContainer=document.createElement("div"),this._dom.appendChild(this._canvasContainer),this._textLeft=document.createElement("div"),this._textLeft.innerHTML="left",this._textLeft.classList.add("float-left"),this._canvasContainer.appendChild(this._textLeft),this._textRight=document.createElement("div"),this._textRight.innerHTML="right",this._textRight.classList.add("float-right"),this._canvasContainer.appendChild(this._textRight),this._canvas=this.createCanvas(),this._canvasContainer.appendChild(this._canvas)}createCanvas(){let e=document.createElement("canvas");return e.height=1,e.width=256,e.style.width="256px",e.style.height="16px",e}paintCanvas(){let e=this._canvas.getContext("2d");if(e.clearRect(0,0,this._canvas.width,this._canvas.height),e.globalCompositeOperation="source-over",this._discrete){e.lineWidth=2*this._canvas.height;for(let t=0;t<this._color.length;t++){let n=this._color[t][0],o=1;t<this._color.length-1&&(o=this._color[t+1][0]);let a=0;t>0&&(a=this._color[t-1][0]);let i=a+(n-a)/2,r=n+(o-n)/2,l=this._color[t],s=this._opacity[t]?this._opacity[t][1]:1;e.beginPath(),e.strokeStyle=`rgba( ${Math.round(255*l[1])}, ${Math.round(255*l[2])}, ${Math.round(255*l[3])}, ${s})`,e.moveTo(i*this._canvas.width,0),e.lineTo(r*this._canvas.width,0),e.stroke(),e.closePath()}}else{let t=e.createLinearGradient(0,0,this._canvas.width,0);for(let e=0;e<this._color.length;e++)t.addColorStop(this._color[e][0],`rgba( ${Math.round(255*this._color[e][1])}, ${Math.round(255*this._color[e][2])}, ${Math.round(255*this._color[e][3])}, 1)`);e.fillStyle=t,e.fillRect(0,0,this._canvas.width,this._canvas.height),e.globalCompositeOperation="destination-in";let n=e.createLinearGradient(0,0,this._canvas.width,0);for(let e=0;e<this._opacity.length;e++)n.addColorStop(this._opacity[e][0],"rgba(255, 255, 255, "+this._opacity[e][1]+")");e.fillStyle=n,e.fillRect(0,0,this._canvas.width,this._canvas.height)}}updateLevels(e){let t=null==e.offset?0:-e.offset;this._textLeft.innerHTML=t+e.value[0]-e.value[1]/2,this._textRight.innerHTML=t+e.value[0]+e.value[1]/2}get texture(){let e=new THREE.Texture(this._canvas);return e.mapping=THREE.UVMapping,e.wrapS=e.wrapT=THREE.ClampToEdgeWrapping,e.magFilter=e.minFilter=THREE.NearestFilter,e.premultiplyAlpha=!0,e.needsUpdate=!0,e}set lut(e){this._color=this._luts[e],this._lut=e,this.paintCanvas()}get lut(){return this._lut}set luts(e){this._luts=e}get luts(){return this._luts}set lutO(e){this._opacity=this._lutsO[e],this._lutO=e,this.paintCanvas()}get lutO(){return this._lutO}set lutsO(e){this._lutsO=e}get lutsO(){return this._lutsO}set discrete(e){this._discrete=e,this.paintCanvas()}get discrete(){return this._discrete}lutsAvailable(e="color"){let t=[],n=this._luts;"color"!==e&&(n=this._lutsO);for(let e in n)t.push(e);return t}static presetLuts(){return{default:[[0,0,0,0],[1,1,1,1]],spectrum:[[0,0,0,0],[.1,0,0,1],[.33,0,1,1],[.5,0,1,0],[.66,1,1,0],[.9,1,0,0],[1,1,1,1]],hot_and_cold:[[0,0,0,1],[.15,0,1,1],[.3,0,1,0],[.45,0,0,0],[.5,0,0,0],[.55,0,0,0],[.7,1,1,0],[.85,1,0,0],[1,1,1,1]],gold:[[0,0,0,0],[.13,.19,.03,0],[.25,.39,.12,0],[.38,.59,.26,0],[.5,.8,.46,.08],[.63,.99,.71,.21],[.75,.99,.88,.34],[.88,.99,.99,.48],[1,.9,.95,.61]],red:[[0,.75,0,0],[.5,1,.5,0],[.95,1,1,0],[1,1,1,1]],green:[[0,0,.75,0],[.5,.5,1,0],[.95,1,1,0],[1,1,1,1]],blue:[[0,0,0,1],[.5,0,.5,1],[.95,0,1,1],[1,1,1,1]],walking_dead:[[0,.1,1,1],[1,1,1,1]],random:[[0,0,0,0],[.27,.18,.18,.18],[.41,1,1,1],[.7,1,0,0],[1,1,1,1]],muscle_bone:[[0,0,0,0],[.00392156862745098,.00784313725490196,0,0],[.00784313725490196,.0196078431372549,0,0],[.011764705882352941,.03137254901960784,0,0],[.01568627450980392,.0392156862745098,0,.00392156862745098],[.0196078431372549,.050980392156862744,.00392156862745098,.00392156862745098],[.023529411764705882,.06274509803921569,.00392156862745098,.00392156862745098],[.027450980392156862,.07058823529411765,.00392156862745098,.00784313725490196],[.03137254901960784,.08235294117647059,.00392156862745098,.00784313725490196],[.03529411764705882,.09411764705882353,.00784313725490196,.00784313725490196],[.0392156862745098,.10196078431372549,.00784313725490196,.00784313725490196],[.043137254901960784,.11372549019607843,.00784313725490196,.011764705882352941],[.047058823529411764,.12549019607843137,.00784313725490196,.011764705882352941],[.050980392156862744,.13333333333333333,.011764705882352941,.011764705882352941],[.054901960784313725,.1450980392156863,.011764705882352941,.01568627450980392],[.058823529411764705,.1568627450980392,.011764705882352941,.01568627450980392],[.06274509803921569,.16470588235294117,.011764705882352941,.01568627450980392],[.06666666666666667,.17647058823529413,.011764705882352941,.0196078431372549],[.07058823529411765,.18823529411764706,.01568627450980392,.0196078431372549],[.07450980392156863,.2,.01568627450980392,.0196078431372549],[.0784313725490196,.20784313725490197,.01568627450980392,.0196078431372549],[.08235294117647059,.2196078431372549,.01568627450980392,.023529411764705882],[.08627450980392157,.23137254901960785,.0196078431372549,.023529411764705882],[.09019607843137255,.23921568627450981,.0196078431372549,.023529411764705882],[.09411764705882353,.25098039215686274,.0196078431372549,.027450980392156862],[.09803921568627451,.2627450980392157,.0196078431372549,.027450980392156862],[.10196078431372549,.27058823529411763,.023529411764705882,.027450980392156862],[.10588235294117647,.2823529411764706,.023529411764705882,.027450980392156862],[.10980392156862745,.29411764705882354,.023529411764705882,.03137254901960784],[.11372549019607843,.30196078431372547,.023529411764705882,.03137254901960784],[.11764705882352941,.3137254901960784,.023529411764705882,.03137254901960784],[.12156862745098039,.3254901960784314,.027450980392156862,.03529411764705882],[.12549019607843137,.3333333333333333,.027450980392156862,.03529411764705882],[.12941176470588237,.34509803921568627,.027450980392156862,.03529411764705882],[.13333333333333333,.3568627450980392,.027450980392156862,.0392156862745098],[.13725490196078433,.36470588235294116,.03137254901960784,.0392156862745098],[.1411764705882353,.3764705882352941,.03137254901960784,.0392156862745098],[.1450980392156863,.38823529411764707,.03137254901960784,.0392156862745098],[.14901960784313725,.4,.03137254901960784,.043137254901960784],[.15294117647058825,.40784313725490196,.03529411764705882,.043137254901960784],[.1568627450980392,.4196078431372549,.03529411764705882,.043137254901960784],[.1607843137254902,.43137254901960786,.03529411764705882,.047058823529411764],[.16470588235294117,.4392156862745098,.03529411764705882,.047058823529411764],[.16862745098039217,.45098039215686275,.03529411764705882,.047058823529411764],[.17254901960784313,.4627450980392157,.0392156862745098,.047058823529411764],[.17647058823529413,.47058823529411764,.0392156862745098,.050980392156862744],[.1803921568627451,.4823529411764706,.0392156862745098,.050980392156862744],[.1843137254901961,.49411764705882355,.0392156862745098,.050980392156862744],[.18823529411764706,.5019607843137255,.043137254901960784,.054901960784313725],[.19215686274509805,.5137254901960784,.043137254901960784,.054901960784313725],[.19607843137254902,.5254901960784314,.043137254901960784,.054901960784313725],[.2,.5333333333333333,.043137254901960784,.058823529411764705],[.20392156862745098,.5450980392156862,.047058823529411764,.058823529411764705],[.20784313725490197,.5568627450980392,.047058823529411764,.058823529411764705],[.21176470588235294,.5647058823529412,.047058823529411764,.058823529411764705],[.21568627450980393,.5764705882352941,.047058823529411764,.06274509803921569],[.2196078431372549,.5882352941176471,.047058823529411764,.06274509803921569],[.2235294117647059,.6,.050980392156862744,.06274509803921569],[.22745098039215686,.6078431372549019,.050980392156862744,.06666666666666667],[.23137254901960785,.6196078431372549,.050980392156862744,.06666666666666667],[.23529411764705882,.6313725490196078,.050980392156862744,.06666666666666667],[.23921568627450981,.6392156862745098,.054901960784313725,.06666666666666667],[.24313725490196078,.6509803921568628,.054901960784313725,.07058823529411765],[.24705882352941178,.6627450980392157,.054901960784313725,.07058823529411765],[.25098039215686274,.6705882352941176,.054901960784313725,.07058823529411765],[.2549019607843137,.6823529411764706,.058823529411764705,.07450980392156863],[.25882352941176473,.6941176470588235,.058823529411764705,.07450980392156863],[.2627450980392157,.7019607843137254,.058823529411764705,.07450980392156863],[.26666666666666666,.7137254901960784,.058823529411764705,.0784313725490196],[.27058823529411763,.7254901960784313,.058823529411764705,.0784313725490196],[.27450980392156865,.7333333333333333,.06274509803921569,.0784313725490196],[.2784313725490196,.7450980392156863,.06274509803921569,.0784313725490196],[.2823529411764706,.7568627450980392,.06274509803921569,.08235294117647059],[.28627450980392155,.7647058823529411,.06274509803921569,.08235294117647059],[.2901960784313726,.7764705882352941,.06666666666666667,.08235294117647059],[.29411764705882354,.788235294117647,.06666666666666667,.08627450980392157],[.2980392156862745,.8,.06666666666666667,.08627450980392157],[.30196078431372547,.807843137254902,.06666666666666667,.08627450980392157],[.3058823529411765,.8196078431372549,.07058823529411765,.08627450980392157],[.30980392156862746,.8313725490196079,.07058823529411765,.09019607843137255],[.3137254901960784,.8392156862745098,.07058823529411765,.09019607843137255],[.3176470588235294,.8509803921568627,.07058823529411765,.09019607843137255],[.3215686274509804,.8627450980392157,.07058823529411765,.09411764705882353],[.3254901960784314,.8705882352941177,.07450980392156863,.09411764705882353],[.32941176470588235,.8823529411764706,.07450980392156863,.09411764705882353],[.3333333333333333,.8941176470588236,.07450980392156863,.09803921568627451],[.33725490196078434,.9019607843137255,.07450980392156863,.09803921568627451],[.3411764705882353,.9137254901960784,.0784313725490196,.09803921568627451],[.34509803921568627,.9254901960784314,.0784313725490196,.09803921568627451],[.34901960784313724,.9333333333333333,.0784313725490196,.10196078431372549],[.35294117647058826,.9450980392156862,.0784313725490196,.10196078431372549],[.3568627450980392,.9568627450980393,.08235294117647059,.10196078431372549],[.3607843137254902,.9647058823529412,.08235294117647059,.10588235294117647],[.36470588235294116,.9764705882352941,.08235294117647059,.10588235294117647],[.3686274509803922,.9882352941176471,.08235294117647059,.10588235294117647],[.37254901960784315,1,.08235294117647059,.10588235294117647],[.3764705882352941,1,.09411764705882353,.10588235294117647],[.3803921568627451,1,.10588235294117647,.10588235294117647],[.3843137254901961,1,.11764705882352941,.10196078431372549],[.38823529411764707,1,.12941176470588237,.10196078431372549],[.39215686274509803,1,.1411764705882353,.10196078431372549],[.396078431372549,1,.15294117647058825,.09803921568627451],[.4,1,.16470588235294117,.09803921568627451],[.403921568627451,1,.17647058823529413,.09803921568627451],[.40784313725490196,1,.18823529411764706,.09411764705882353],[.4117647058823529,1,.2,.09411764705882353],[.41568627450980394,1,.21176470588235294,.09411764705882353],[.4196078431372549,1,.2235294117647059,.09019607843137255],[.4235294117647059,1,.23529411764705882,.09019607843137255],[.42745098039215684,1,.24705882352941178,.08627450980392157],[.43137254901960786,1,.25882352941176473,.08627450980392157],[.43529411764705883,1,.27058823529411763,.08627450980392157],[.4392156862745098,1,.2823529411764706,.08235294117647059],[.44313725490196076,1,.29411764705882354,.08235294117647059],[.4470588235294118,1,.3058823529411765,.08235294117647059],[.45098039215686275,1,.3176470588235294,.0784313725490196],[.4549019607843137,1,.32941176470588235,.0784313725490196],[.4588235294117647,1,.3411764705882353,.0784313725490196],[.4627450980392157,1,.35294117647058826,.07450980392156863],[.4666666666666667,1,.36470588235294116,.07450980392156863],[.47058823529411764,1,.3764705882352941,.07450980392156863],[.4745098039215686,1,.38823529411764707,.07058823529411765],[.47843137254901963,1,.4,.07058823529411765],[.4823529411764706,1,.4117647058823529,.07058823529411765],[.48627450980392156,1,.4235294117647059,.06666666666666667],[.49019607843137253,1,.43529411764705883,.06666666666666667],[.49411764705882355,1,.4470588235294118,.06274509803921569],[.4980392156862745,1,.4588235294117647,.06274509803921569],[.5019607843137255,1,.47058823529411764,.06274509803921569],[.5058823529411764,1,.4823529411764706,.058823529411764705],[.5098039215686274,1,.49411764705882355,.058823529411764705],[.5137254901960784,1,.5058823529411764,.058823529411764705],[.5176470588235295,1,.5137254901960784,.054901960784313725],[.5215686274509804,1,.5254901960784314,.054901960784313725],[.5254901960784314,1,.5372549019607843,.054901960784313725],[.5294117647058824,1,.5490196078431373,.050980392156862744],[.5333333333333333,1,.5607843137254902,.050980392156862744],[.5372549019607843,1,.5725490196078431,.050980392156862744],[.5411764705882353,1,.5843137254901961,.047058823529411764],[.5450980392156862,1,.596078431372549,.047058823529411764],[.5490196078431373,1,.6078431372549019,.043137254901960784],[.5529411764705883,1,.6196078431372549,.043137254901960784],[.5568627450980392,1,.6313725490196078,.043137254901960784],[.5607843137254902,1,.6431372549019608,.0392156862745098],[.5647058823529412,1,.6549019607843137,.0392156862745098],[.5686274509803921,1,.6666666666666666,.0392156862745098],[.5725490196078431,1,.6784313725490196,.03529411764705882],[.5764705882352941,1,.6901960784313725,.03529411764705882],[.5803921568627451,1,.6941176470588235,.0392156862745098],[.5843137254901961,1,.7019607843137254,.0392156862745098],[.5882352941176471,1,.7058823529411765,.043137254901960784],[.592156862745098,1,.7098039215686275,.043137254901960784],[.596078431372549,1,.7137254901960784,.047058823529411764],[.6,1,.7176470588235294,.047058823529411764],[.6039215686274509,1,.7254901960784313,.050980392156862744],[.6078431372549019,1,.7294117647058823,.050980392156862744],[.611764705882353,1,.7333333333333333,.054901960784313725],[.615686274509804,1,.7372549019607844,.058823529411764705],[.6196078431372549,1,.7411764705882353,.058823529411764705],[.6235294117647059,1,.7490196078431373,.06274509803921569],[.6274509803921569,1,.7529411764705882,.06274509803921569],[.6313725490196078,1,.7568627450980392,.06666666666666667],[.6352941176470588,1,.7607843137254902,.06666666666666667],[.6392156862745098,1,.7647058823529411,.07058823529411765],[.6431372549019608,1,.7725490196078432,.07058823529411765],[.6470588235294118,1,.7764705882352941,.07450980392156863],[.6509803921568628,1,.7803921568627451,.07450980392156863],[.6549019607843137,1,.7843137254901961,.0784313725490196],[.6588235294117647,1,.788235294117647,.08235294117647059],[.6627450980392157,1,.796078431372549,.08235294117647059],[.6666666666666666,1,.8,.08627450980392157],[.6705882352941176,1,.803921568627451,.08627450980392157],[.6745098039215687,1,.807843137254902,.09019607843137255],[.6784313725490196,1,.8117647058823529,.09019607843137255],[.6823529411764706,1,.8196078431372549,.09411764705882353],[.6862745098039216,1,.8235294117647058,.09411764705882353],[.6901960784313725,1,.8274509803921568,.09803921568627451],[.6941176470588235,1,.8313725490196079,.10196078431372549],[.6980392156862745,1,.8352941176470589,.10196078431372549],[.7019607843137254,1,.8431372549019608,.10588235294117647],[.7058823529411765,1,.8470588235294118,.10588235294117647],[.7098039215686275,1,.8509803921568627,.10980392156862745],[.7137254901960784,1,.8549019607843137,.10980392156862745],[.7176470588235294,1,.8627450980392157,.11372549019607843],[.7215686274509804,1,.8666666666666667,.11372549019607843],[.7254901960784313,1,.8705882352941177,.11764705882352941],[.7294117647058823,1,.8745098039215686,.12156862745098039],[.7333333333333333,1,.8784313725490196,.12156862745098039],[.7372549019607844,1,.8862745098039215,.12549019607843137],[.7411764705882353,1,.8901960784313725,.12549019607843137],[.7450980392156863,1,.8941176470588236,.12941176470588237],[.7490196078431373,1,.8980392156862745,.12941176470588237],[.7529411764705882,1,.9019607843137255,.13333333333333333],[.7568627450980392,1,.9098039215686274,.13333333333333333],[.7607843137254902,1,.9137254901960784,.13725490196078433],[.7647058823529411,1,.9176470588235294,.1411764705882353],[.7686274509803922,1,.9215686274509803,.1411764705882353],[.7725490196078432,1,.9254901960784314,.1450980392156863],[.7764705882352941,1,.9333333333333333,.1450980392156863],[.7803921568627451,1,.9372549019607843,.14901960784313725],[.7843137254901961,1,.9411764705882353,.14901960784313725],[.788235294117647,1,.9450980392156862,.15294117647058825],[.792156862745098,1,.9450980392156862,.16862745098039217],[.796078431372549,1,.9490196078431372,.1843137254901961],[.8,1,.9490196078431372,.2],[.803921568627451,1,.9490196078431372,.21568627450980393],[.807843137254902,1,.9490196078431372,.22745098039215686],[.8117647058823529,1,.9529411764705882,.24313725490196078],[.8156862745098039,1,.9529411764705882,.25882352941176473],[.8196078431372549,1,.9529411764705882,.27450980392156865],[.8235294117647058,1,.9529411764705882,.2901960784313726],[.8274509803921568,1,.9568627450980393,.3058823529411765],[.8313725490196079,1,.9568627450980393,.3215686274509804],[.8352941176470589,1,.9568627450980393,.33725490196078434],[.8392156862745098,1,.9568627450980393,.35294117647058826],[.8431372549019608,1,.9607843137254902,.3686274509803922],[.8470588235294118,1,.9607843137254902,.3843137254901961],[.8509803921568627,1,.9607843137254902,.4],[.8549019607843137,1,.9607843137254902,.4117647058823529],[.8588235294117647,1,.9647058823529412,.42745098039215684],[.8627450980392157,1,.9647058823529412,.44313725490196076],[.8666666666666667,1,.9647058823529412,.4588235294117647],[.8705882352941177,1,.9647058823529412,.4745098039215686],[.8745098039215686,1,.9686274509803922,.49019607843137253],[.8784313725490196,1,.9686274509803922,.5058823529411764],[.8823529411764706,1,.9686274509803922,.5215686274509804],[.8862745098039215,1,.9686274509803922,.5372549019607843],[.8901960784313725,1,.9725490196078431,.5529411764705883],[.8941176470588236,1,.9725490196078431,.5686274509803921],[.8980392156862745,1,.9725490196078431,.5843137254901961],[.9019607843137255,1,.9725490196078431,.6],[.9058823529411765,1,.9725490196078431,.611764705882353],[.9098039215686274,1,.9764705882352941,.6274509803921569],[.9137254901960784,1,.9764705882352941,.6431372549019608],[.9176470588235294,1,.9764705882352941,.6588235294117647],[.9215686274509803,1,.9764705882352941,.6745098039215687],[.9254901960784314,1,.9803921568627451,.6901960784313725],[.9294117647058824,1,.9803921568627451,.7058823529411765],[.9333333333333333,1,.9803921568627451,.7215686274509804],[.9372549019607843,1,.9803921568627451,.7372549019607844],[.9411764705882353,1,.984313725490196,.7529411764705882],[.9450980392156862,1,.984313725490196,.7686274509803922],[.9490196078431372,1,.984313725490196,.7843137254901961],[.9529411764705882,1,.984313725490196,.8],[.9568627450980393,1,.9882352941176471,.8117647058823529],[.9607843137254902,1,.9882352941176471,.8274509803921568],[.9647058823529412,1,.9882352941176471,.8431372549019608],[.9686274509803922,1,.9882352941176471,.8588235294117647],[.9725490196078431,1,.9921568627450981,.8745098039215686],[.9764705882352941,1,.9921568627450981,.8901960784313725],[.9803921568627451,1,.9921568627450981,.9058823529411765],[.984313725490196,1,.9921568627450981,.9215686274509803],[.9882352941176471,1,.996078431372549,.9372549019607843],[.9921568627450981,1,.996078431372549,.9529411764705882],[.996078431372549,1,.996078431372549,.9686274509803922],[1,1,.996078431372549,.984313725490196]]}}static presetLutsO(){return{linear:[[0,0],[1,1]],lowpass:[[0,.8],[.2,.6],[.3,.1],[1,0]],bandpass:[[0,0],[.4,.8],[.6,.8],[1,0]],highpass:[[0,0],[.7,.1],[.8,.6],[1,.8]],flat:[[0,.7],[1,1]],random:[[0,0],[.38,0],[.55,1],[.72,1],[1,.05]],linear_full:[[0,0],[.00392156862745098,.00392156862745098],[.00784313725490196,.00784313725490196],[.011764705882352941,.011764705882352941],[.01568627450980392,.01568627450980392],[.0196078431372549,.0196078431372549],[.023529411764705882,.023529411764705882],[.027450980392156862,.027450980392156862],[.03137254901960784,.03137254901960784],[.03529411764705882,.03529411764705882],[.0392156862745098,.0392156862745098],[.043137254901960784,.043137254901960784],[.047058823529411764,.047058823529411764],[.050980392156862744,.050980392156862744],[.054901960784313725,.054901960784313725],[.058823529411764705,.058823529411764705],[.06274509803921569,.06274509803921569],[.06666666666666667,.06666666666666667],[.07058823529411765,.07058823529411765],[.07450980392156863,.07450980392156863],[.0784313725490196,.0784313725490196],[.08235294117647059,.08235294117647059],[.08627450980392157,.08627450980392157],[.09019607843137255,.09019607843137255],[.09411764705882353,.09411764705882353],[.09803921568627451,.09803921568627451],[.10196078431372549,.10196078431372549],[.10588235294117647,.10588235294117647],[.10980392156862745,.10980392156862745],[.11372549019607843,.11372549019607843],[.11764705882352941,.11764705882352941],[.12156862745098039,.12156862745098039],[.12549019607843137,.12549019607843137],[.12941176470588237,.12941176470588237],[.13333333333333333,.13333333333333333],[.13725490196078433,.13725490196078433],[.1411764705882353,.1411764705882353],[.1450980392156863,.1450980392156863],[.14901960784313725,.14901960784313725],[.15294117647058825,.15294117647058825],[.1568627450980392,.1568627450980392],[.1607843137254902,.1607843137254902],[.16470588235294117,.16470588235294117],[.16862745098039217,.16862745098039217],[.17254901960784313,.17254901960784313],[.17647058823529413,.17647058823529413],[.1803921568627451,.1803921568627451],[.1843137254901961,.1843137254901961],[.18823529411764706,.18823529411764706],[.19215686274509805,.19215686274509805],[.19607843137254902,.19607843137254902],[.2,.2],[.20392156862745098,.20392156862745098],[.20784313725490197,.20784313725490197],[.21176470588235294,.21176470588235294],[.21568627450980393,.21568627450980393],[.2196078431372549,.2196078431372549],[.2235294117647059,.2235294117647059],[.22745098039215686,.22745098039215686],[.23137254901960785,.23137254901960785],[.23529411764705882,.23529411764705882],[.23921568627450981,.23921568627450981],[.24313725490196078,.24313725490196078],[.24705882352941178,.24705882352941178],[.25098039215686274,.25098039215686274],[.2549019607843137,.2549019607843137],[.25882352941176473,.25882352941176473],[.2627450980392157,.2627450980392157],[.26666666666666666,.26666666666666666],[.27058823529411763,.27058823529411763],[.27450980392156865,.27450980392156865],[.2784313725490196,.2784313725490196],[.2823529411764706,.2823529411764706],[.28627450980392155,.28627450980392155],[.2901960784313726,.2901960784313726],[.29411764705882354,.29411764705882354],[.2980392156862745,.2980392156862745],[.30196078431372547,.30196078431372547],[.3058823529411765,.3058823529411765],[.30980392156862746,.30980392156862746],[.3137254901960784,.3137254901960784],[.3176470588235294,.3176470588235294],[.3215686274509804,.3215686274509804],[.3254901960784314,.3254901960784314],[.32941176470588235,.32941176470588235],[.3333333333333333,.3333333333333333],[.33725490196078434,.33725490196078434],[.3411764705882353,.3411764705882353],[.34509803921568627,.34509803921568627],[.34901960784313724,.34901960784313724],[.35294117647058826,.35294117647058826],[.3568627450980392,.3568627450980392],[.3607843137254902,.3607843137254902],[.36470588235294116,.36470588235294116],[.3686274509803922,.3686274509803922],[.37254901960784315,.37254901960784315],[.3764705882352941,.3764705882352941],[.3803921568627451,.3803921568627451],[.3843137254901961,.3843137254901961],[.38823529411764707,.38823529411764707],[.39215686274509803,.39215686274509803],[.396078431372549,.396078431372549],[.4,.4],[.403921568627451,.403921568627451],[.40784313725490196,.40784313725490196],[.4117647058823529,.4117647058823529],[.41568627450980394,.41568627450980394],[.4196078431372549,.4196078431372549],[.4235294117647059,.4235294117647059],[.42745098039215684,.42745098039215684],[.43137254901960786,.43137254901960786],[.43529411764705883,.43529411764705883],[.4392156862745098,.4392156862745098],[.44313725490196076,.44313725490196076],[.4470588235294118,.4470588235294118],[.45098039215686275,.45098039215686275],[.4549019607843137,.4549019607843137],[.4588235294117647,.4588235294117647],[.4627450980392157,.4627450980392157],[.4666666666666667,.4666666666666667],[.47058823529411764,.47058823529411764],[.4745098039215686,.4745098039215686],[.47843137254901963,.47843137254901963],[.4823529411764706,.4823529411764706],[.48627450980392156,.48627450980392156],[.49019607843137253,.49019607843137253],[.49411764705882355,.49411764705882355],[.4980392156862745,.4980392156862745],[.5019607843137255,.5019607843137255],[.5058823529411764,.5058823529411764],[.5098039215686274,.5098039215686274],[.5137254901960784,.5137254901960784],[.5176470588235295,.5176470588235295],[.5215686274509804,.5215686274509804],[.5254901960784314,.5254901960784314],[.5294117647058824,.5294117647058824],[.5333333333333333,.5333333333333333],[.5372549019607843,.5372549019607843],[.5411764705882353,.5411764705882353],[.5450980392156862,.5450980392156862],[.5490196078431373,.5490196078431373],[.5529411764705883,.5529411764705883],[.5568627450980392,.5568627450980392],[.5607843137254902,.5607843137254902],[.5647058823529412,.5647058823529412],[.5686274509803921,.5686274509803921],[.5725490196078431,.5725490196078431],[.5764705882352941,.5764705882352941],[.5803921568627451,.5803921568627451],[.5843137254901961,.5843137254901961],[.5882352941176471,.5882352941176471],[.592156862745098,.592156862745098],[.596078431372549,.596078431372549],[.6,.6],[.6039215686274509,.6039215686274509],[.6078431372549019,.6078431372549019],[.611764705882353,.611764705882353],[.615686274509804,.615686274509804],[.6196078431372549,.6196078431372549],[.6235294117647059,.6235294117647059],[.6274509803921569,.6274509803921569],[.6313725490196078,.6313725490196078],[.6352941176470588,.6352941176470588],[.6392156862745098,.6392156862745098],[.6431372549019608,.6431372549019608],[.6470588235294118,.6470588235294118],[.6509803921568628,.6509803921568628],[.6549019607843137,.6549019607843137],[.6588235294117647,.6588235294117647],[.6627450980392157,.6627450980392157],[.6666666666666666,.6666666666666666],[.6705882352941176,.6705882352941176],[.6745098039215687,.6745098039215687],[.6784313725490196,.6784313725490196],[.6823529411764706,.6823529411764706],[.6862745098039216,.6862745098039216],[.6901960784313725,.6901960784313725],[.6941176470588235,.6941176470588235],[.6980392156862745,.6980392156862745],[.7019607843137254,.7019607843137254],[.7058823529411765,.7058823529411765],[.7098039215686275,.7098039215686275],[.7137254901960784,.7137254901960784],[.7176470588235294,.7176470588235294],[.7215686274509804,.7215686274509804],[.7254901960784313,.7254901960784313],[.7294117647058823,.7294117647058823],[.7333333333333333,.7333333333333333],[.7372549019607844,.7372549019607844],[.7411764705882353,.7411764705882353],[.7450980392156863,.7450980392156863],[.7490196078431373,.7490196078431373],[.7529411764705882,.7529411764705882],[.7568627450980392,.7568627450980392],[.7607843137254902,.7607843137254902],[.7647058823529411,.7647058823529411],[.7686274509803922,.7686274509803922],[.7725490196078432,.7725490196078432],[.7764705882352941,.7764705882352941],[.7803921568627451,.7803921568627451],[.7843137254901961,.7843137254901961],[.788235294117647,.788235294117647],[.792156862745098,.792156862745098],[.796078431372549,.796078431372549],[.8,.8],[.803921568627451,.803921568627451],[.807843137254902,.807843137254902],[.8117647058823529,.8117647058823529],[.8156862745098039,.8156862745098039],[.8196078431372549,.8196078431372549],[.8235294117647058,.8235294117647058],[.8274509803921568,.8274509803921568],[.8313725490196079,.8313725490196079],[.8352941176470589,.8352941176470589],[.8392156862745098,.8392156862745098],[.8431372549019608,.8431372549019608],[.8470588235294118,.8470588235294118],[.8509803921568627,.8509803921568627],[.8549019607843137,.8549019607843137],[.8588235294117647,.8588235294117647],[.8627450980392157,.8627450980392157],[.8666666666666667,.8666666666666667],[.8705882352941177,.8705882352941177],[.8745098039215686,.8745098039215686],[.8784313725490196,.8784313725490196],[.8823529411764706,.8823529411764706],[.8862745098039215,.8862745098039215],[.8901960784313725,.8901960784313725],[.8941176470588236,.8941176470588236],[.8980392156862745,.8980392156862745],[.9019607843137255,.9019607843137255],[.9058823529411765,.9058823529411765],[.9098039215686274,.9098039215686274],[.9137254901960784,.9137254901960784],[.9176470588235294,.9176470588235294],[.9215686274509803,.9215686274509803],[.9254901960784314,.9254901960784314],[.9294117647058824,.9294117647058824],[.9333333333333333,.9333333333333333],[.9372549019607843,.9372549019607843],[.9411764705882353,.9411764705882353],[.9450980392156862,.9450980392156862],[.9490196078431372,.9490196078431372],[.9529411764705882,.9529411764705882],[.9568627450980393,.9568627450980393],[.9607843137254902,.9607843137254902],[.9647058823529412,.9647058823529412],[.9686274509803922,.9686274509803922],[.9725490196078431,.9725490196078431],[.9764705882352941,.9764705882352941],[.9803921568627451,.9803921568627451],[.984313725490196,.984313725490196],[.9882352941176471,.9882352941176471],[.9921568627450981,.9921568627450981],[.996078431372549,.996078431372549],[1,1]]}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});class o{static uniforms(){return{uTextureSize:{type:"i",value:0,typeGLSL:"int"},uTextureContainer:{type:"tv",value:[],typeGLSL:"sampler2D",length:7},uDataDimensions:{type:"iv",value:[0,0,0],typeGLSL:"ivec3"},uOffset:{type:"v",value:[0,0,0],typeGLSL:"vec3"},uWorldToData:{type:"m4",value:new THREE.Matrix4,typeGLSL:"mat4"},uWindowCenterWidth:{type:"fv1",value:[0,0],typeGLSL:"float",length:2},uLowerUpperThreshold:{type:"fv1",value:[0,0],typeGLSL:"float",length:2},uRescaleSlopeIntercept:{type:"fv1",value:[0,0],typeGLSL:"float",length:2},uNumberOfChannels:{type:"i",value:1,typeGLSL:"int"},uBitsAllocated:{type:"i",value:8,typeGLSL:"int"},uInvert:{type:"i",value:0,typeGLSL:"int"},uLut:{type:"i",value:0,typeGLSL:"int"},uTextureLUT:{type:"t",value:[],typeGLSL:"sampler2D"},uLutSegmentation:{type:"i",value:0,typeGLSL:"int"},uTextureLUTSegmentation:{type:"t",value:[],typeGLSL:"sampler2D"},uPixelType:{type:"i",value:0,typeGLSL:"int"},uPackedPerPixel:{type:"i",value:1,typeGLSL:"int"},uInterpolation:{type:"i",value:1,typeGLSL:"int"},uCanvasWidth:{type:"f",value:0,typeGLSL:"float"},uCanvasHeight:{type:"f",value:0,typeGLSL:"float"},uBorderColor:{type:"v3",value:[1,0,.5],typeGLSL:"vec3"},uBorderWidth:{type:"f",value:2,typeGLSL:"float"},uBorderMargin:{type:"f",value:2,typeGLSL:"float"},uBorderDashLength:{type:"f",value:10,typeGLSL:"float"}}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});class o{static uniforms(){return{uTextureBackground:{type:"t",value:[],typeGLSL:"sampler2D"},uTextureFusion:{type:"t",value:[],typeGLSL:"sampler2D"},uOpacityMin:{type:"f",value:1,typeGLSL:"float"},uOpacityMax:{type:"f",value:1,typeGLSL:"float"},uThreshold:{type:"f",value:.01,typeGLSL:"float"},uUseFusion:{type:"b",value:!0,typeGLSL:"bool"},uTextureOverlay:{type:"t",value:[],typeGLSL:"sampler2D"},uUseOverlay:{type:"b",value:!0,typeGLSL:"bool"}}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});class o{constructor(e){this._uniforms=e,this._functions={},this._main=""}functions(){""===this._main&&this.main();let e="";for(let t in this._functions)e+=this._functions[t]+"\n";return e}uniforms(){let e="";for(let t in this._uniforms){let n=this._uniforms[t];e+=`uniform ${n.typeGLSL} ${t}`,n&&n.length&&(e+=`[${n.length}]`),e+=";\n"}return e}main(){this._main="\nvoid main(void) {\n\n  vec2 texc = vec2(((vProjectedCoords.x / vProjectedCoords.w) + 1.0 ) / 2.0,\n                ((vProjectedCoords.y / vProjectedCoords.w) + 1.0 ) / 2.0 );\n\n  // just silence warning for\n  // vec4 dummy = vPos;\n\n  //The back position is the world space position stored in the texture.\n  vec4 baseColorBG = texture2D(uTextureBackground, texc);\n  vec4 baseColorFusion = texture2D(uTextureFusion, texc);\n\n  if(!uUseFusion || baseColorFusion.w < uThreshold){\n    gl_FragColor = baseColorBG;\n  }else{\n    gl_FragColor = mix( baseColorBG, baseColorFusion, uOpacityMin+uOpacityMax*baseColorFusion.w);\n  }\n  return;\n}\n   "}compute(){return`\n// uniforms\n${this.uniforms()}\n\n// varying (should fetch it from vertex directly)\n// varying vec4      vPos;\nvarying vec4      vProjectedCoords;\n\n// tailored functions\n${this.functions()}\n\n// main loop\n${this._main}\n      `}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return u});const o=n(5),a=n(4),i=n(1),r=n(3),l=n(2),s=n(0);class u{constructor(e){let t=[0,0,0,0,0,0];this.worldBB=t,this.uniforms={};let n,u,d,c,f=this,h=e,v={background:null,fusion:null,overlay:null,struct:[]},m={background:null,fusion:null,overlay:null,struct:[]},p={background:null,fusion:null,overlay:null,struct:[]},g={background:null,fusion:null,overlay:null,struct:[]};function y(){f.uniformsMix.uTextureBackground.value=p.background.texture,null!==p.fusion&&(f.uniformsMix.uTextureFusion.value=p.fusion.texture),null!==p.overlay&&(f.uniformsMix.uTextureOverlay.value=p.overlay.texture),f.uniformsMix.uOpacityMin.value=.1,f.uniformsMix.uOpacityMax.value=.8,f.uniformsMix.uThreshold.value=.01}function x(){!function(){null!==p.fusion&&(g.fusion.geometry.dispose(),g.fusion.geometry=n.slice.geometry,g.fusion.geometry.verticesNeedUpdate=!0),null!==p.overlay&&(g.overlay.geometry.dispose(),g.overlay.geometry=n.slice.geometry,g.overlay.geometry.verticesNeedUpdate=!0);for(let e of g.struct)e.geometry.dispose(),e.geometry=n.slice.geometry,e.geometry.verticesNeedUpdate=!0}(),u.remove(c),c.material.dispose(),c.geometry.dispose(),(c=new THREE.Mesh(n.slice.geometry,d)).applyMatrix(n.stack._ijk2LPS),u.add(c),function(){if(m.background.updateLevels(f.uniforms.background.uWindowCenterWidth),null!==m.fusion&&m.fusion.updateLevels(f.uniforms.fusion.uWindowCenterWidth),null!==m.overlay&&m.overlay.updateLevels(f.uniforms.overlay.uWindowCenterWidth),null!==m.struct)for(let e=0;e<m.struct.length;e++)m.struct[e].updateLevels(f.uniforms.struct[e].uWindowCenterWidth)}()}function b(e){for(let n=0;n<t.length;n++)n%2==0?e[n]<t[n]&&(t[n]=e[n]):e[n]>t[n]&&(t[n]=e[n])}v.background=new THREE.Scene,m.background=new l.default("my-lut-canvases","default","linear",[[0,0,0,0],[0,1,1,1]],[[0,1],[1,1]]),m.background.luts=l.default.presetLuts(),m.background.lut="default",p.background=new THREE.WebGLRenderTarget(h.clientWidth,h.clientHeight,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat}),p.background.setSize(h.clientWidth,h.clientHeight),this.resize=function(){p.background.setSize(h.clientWidth,h.clientHeight),null!==p.fusion&&p.fusion.setSize(h.clientWidth,h.clientHeight),null!==p.overlay&&p.overlay.setSize(h.clientWidth,h.clientHeight);for(let e of p.struct)e.setSize(h.clientWidth,h.clientHeight)},this.render=function(e,t){x(),e.render(v.background,t,p.background,!0),null!==p.fusion&&e.render(v.fusion,t,p.fusion,!0),null!==p.overlay&&e.render(v.overlay,t,p.overlay,!0);for(let n=0;n<p.struct.length;n++)e.render(v.struct[n],t,p.struct[n],!0);e.render(u,t)},this.setMainStackHelper=function(e){n=e,e.slice.intensityAuto=s.autoIntensity,e.slice.interpolation=s.interpolation,e.slice.lut=m.background,e.slice.lutTexture=m.background.texture,e._stack._minMax[0]<0&&(e.slice._uniforms.uWindowCenterWidth.offset=-e._stack._minMax[0]),f.uniforms.background=e.slice._uniforms,g.background=e,v.background.add(e),b(e._stack.worldBoundingBox()),function(){u=new THREE.Scene,f.uniformsMix=a.default.uniforms(),y();let e=new o.default(f.uniformsMix),t=new AMI.LayerVertexShader,i=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:f.uniformsMix,vertexShader:t.compute(),fragmentShader:e.compute(),transparent:!0});d=i;let r=new THREE.Mesh(n.slice.geometry,i);c=r,r.applyMatrix(n.stack._ijk2LPS),u.add(r),x()}()},this.addLayerStack=function(e,t){if("fusion"!=t&&"overlay"!=t)return;let o=new THREE.Scene;v[t]=o;let a=new l.default("my-lut-canvases","default","linear",[[0,0,0,0],[1,1,1,1]],[[0,0],[1,1]]);a.luts=l.default.presetLuts(),m[t]=a,a.lut="blue";let u=new THREE.WebGLRenderTarget(h.clientWidth,h.clientHeight,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat});u.setSize(h.clientWidth,h.clientHeight),p[t]=u,e.prepare(),e.pack();let d=[];for(let t=0;t<e._rawData.length;t++){let n=new THREE.DataTexture(e.rawData[t],e.textureSize,e.textureSize,e.textureType,THREE.UnsignedByteType,THREE.UVMapping,THREE.ClampToEdgeWrapping,THREE.ClampToEdgeWrapping,THREE.NearestFilter,THREE.NearestFilter);n.needsUpdate=!0,n.flipY=!0,d.push(n)}let c=n._stack.worldCenter().clone();c.sub(e.worldCenter());let x=r.default.uniforms();x.uTextureSize.value=e.textureSize,x.uOffset.value=[-c.x,-c.y,-c.z],x.uTextureContainer.value=d,x.uWorldToData.value=e.lps2IJK,x.uNumberOfChannels.value=e.numberOfChannels,x.uBitsAllocated.value=e.bitsAllocated,x.uPackedPerPixel.value=e.packedPerPixel,x.uWindowCenterWidth.value=[e.windowCenter,e.windowWidth],x.uRescaleSlopeIntercept.value=[e.rescaleSlope,e.rescaleIntercept],x.uDataDimensions.value=[e.dimensionsIJK.x,e.dimensionsIJK.y,e.dimensionsIJK.z],x.uInterpolation.value=s.interpolationNM;let _=0;e._minMax[0]<0&&(_=-e._minMax[0],x.uWindowCenterWidth.offset=_),x.uLowerUpperThreshold.value=[e.minMax[0]+_,e.minMax[1]+_],x.uLut.value=1,x.uTextureLUT.value=a.texture,f.uniforms[t]=x;let w=new i.default(x),C=new AMI.DataVertexShader,L=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:x,vertexShader:C.compute(),fragmentShader:w.compute()}),T=new THREE.Mesh(n.slice.geometry,L);g[t]=T,T.applyMatrix(n.stack._ijk2LPS),console.log(e.worldCenter()),console.log(n._stack.worldCenter()),o.add(T),b(e.worldBoundingBox()),y()}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return a});const o=n(0);class a extends THREE.EventDispatcher{constructor(e,t,n,a){super();let i=this,r=a,l={NONE:0,SETPROB:1,PAN:2,WINDOW:3},s=new Map,u=(l.NONE,new THREE.Vector2),d=new THREE.Vector2,c=new THREE.Vector3,f=new THREE.Vector3;function h(e){switch(e.key){case o.zoomIn:case o.zoomIn2:i.zoom(!0);break;case o.zoomOut:case o.zoomOut2:i.zoom(!1);break;case o.resetCamera:i.reset()}}function v(e){switch(s.set(e.keyCode,!0),e.key){case"Escape":i._state=l.NONE;break;case o.stackUp:i.scrollStack(!0);break;case o.stackDown:i.scrollStack(!1)}}function m(e){s.set(e.keyCode,!1)}function p(e){switch(e.which){case o.mouseClickProbe:i._state=l.SETPROB;break;case o.mouseClickPan:i._state=l.PAN,e.preventDefault();break;case o.mouseClickWindow:i._state=l.WINDOW}u.x=e.clientX,u.y=e.clientY,document.addEventListener("mousemove",y,!1)}function g(e){i._state=l.NONE,document.removeEventListener("mousemove",y,!1)}function y(e){switch(d.x=e.clientX,d.y=e.clientY,i._state){case l.PAN:i.pan(u,d);break;case l.SETPROB:case l.WINDOW:}u=d,d=new THREE.Vector2}function x(e){var t;t=o.zoomHold,s.has(t)&&s.get(t)?(i.zoom(e.deltaY>0===o.zoomInIsWheelDown),e.preventDefault()):(i.scrollStack(e.deltaY<0===o.stackTopIsWheelDown),e.preventDefault())}function b(e){o.rightClickAllowed||e.preventDefault()}this.camera=e,this.stack=t,this.domElement=void 0!==n?n:document,this.target=new THREE.Vector3,this.noZoom=!1,this.noPan=!1,this.noRotate=!0,this.handleResize=function(){},this.update=function(){i._changed&&i.camera.updateProjectionMatrix(),this.camera.lookAt(this.target)},this.setAsResetState=function(){},this.reset=function(){r.hasChanged=!0},this.pan=function(e,t){if(c.subVectors(i.camera.position,i.target),this.noPan)return;let o=t.x-e.x,a=t.y-e.y;o/=n.offsetWidth,a/=n.offsetHeight,o*=(i.camera.right-i.camera.left)/i.camera.zoom,a*=(i.camera.top-i.camera.bottom)/i.camera.zoom;let l=new THREE.Vector3;l.copy(i.camera.up).setLength(a),l.add(f.copy(c).cross(i.camera.up).setLength(o)),i.camera.position.add(l),i.target.add(l),i._changed=!0,r.hasChanged=!0},this.zoom=function(e){if(this.noZoom)return;let t=e?1/o.zoomSpeed:o.zoomSpeed;Math.abs(t-1)>1e-6&&t>0&&(this.camera.zoom/=t,r.hasChanged=!0)},this.scrollStack=function(e){if(e){if(t.index>=t._stack.dimensionsIJK.z-1)return!1;t.index+=1}else{if(t.index<=0)return!1;t.index-=1}r.hasChanged=!0},this.dispose=function(){document.removeEventListener("mousedown",p,!1),document.removeEventListener("mouseup",g,!1),document.removeEventListener("wheel",x,!1),document.removeEventListener("contextmenu",b,!1),document.removeEventListener("keypress",h,!1),document.removeEventListener("keyup",m,!1),document.removeEventListener("keydown",v,!1)},document.addEventListener("mousedown",p,!1),document.addEventListener("mouseup",g,!1),document.addEventListener("wheel",x,!1),document.addEventListener("contextmenu",b,!1),document.addEventListener("keypress",h,!1),document.addEventListener("keyup",m,!1),document.addEventListener("keydown",v,!1),this.camera.position.z=1,this.handleResize(),this.update(),this.setAsResetState()}}},function(e,t){e.exports=function(){function e(e,t){"CR"!==t&&"DX"!==t&&(document.getElementById("top").innerHTML=e[0],document.getElementById("bottom").innerHTML=e[1],document.getElementById("right").innerHTML=e[2],document.getElementById("left").innerHTML=e[3])}return{buildGUI:function(t,n,o){let a=t._stack,i=new dat.GUI({autoPlace:!1}),r={invertRows:!1,invertColumns:!1,rotate:!1,orientation:"default",convention:"radio"};document.getElementById("my-gui-container").appendChild(i.domElement);let l=i.addFolder("Stack");l.add(t.slice,"windowWidth",1,a.minMax[1]-a.minMax[0]).step(1).listen().onChange(e=>{o.hasChanged=!0}),l.add(t.slice,"windowCenter",a.minMax[0],a.minMax[1]).step(1).listen().onChange(e=>{o.hasChanged=!0}),l.add(t.slice,"invert").onChange(e=>{o.hasChanged=!0}),l.add(t.slice.lut,"lut",t.slice.lut.lutsAvailable()).onChange(function(e){t.slice.lutTexture=t.slice.lut.texture,o.hasChanged=!0}),l.add(t.slice.lut,"discrete",!1).onChange(function(e){t.slice.lutTexture=t.slice.lut.texture,o.hasChanged=!0});let s=l.add(t,"index",0,a.dimensionsIJK.z-1).step(1).listen().onChange(e=>{o.hasChanged=!0});l.open();let u=i.addFolder("Camera");u.add(r,"invertRows").onChange(function(){n.invertRows(),e(n.directionsLabel,a.modality)}),u.add(r,"invertColumns").onChange(function(){n.invertColumns(),e(n.directionsLabel,a.modality)}),u.add(n,"angle",0,360).step(1).listen().onChange(function(){e(n.directionsLabel,a.modality),o.hasChanged=!0}),u.add(r,"rotate").onChange(function(){n.rotate(),e(n.directionsLabel,a.modality),o.hasChanged=!0}),u.add(r,"orientation",["default","axial","coronal","sagittal"]).onChange(function(i){n.orientation=i,n.update(),n.fitBox(2),t.orientation=n.stackOrientation,e(n.directionsLabel,a.modality),s.__max=t.orientationMaxIndex,t.index=Math.floor(s.__max/2),o.hasChanged=!0}),u.add(r,"convention",["radio","neuro"]).onChange(function(t){n.convention=t,n.update(),n.fitBox(2),e(n.directionsLabel,a.modality),o.hasChanged=!0})},updateLabels:e}}()},function(e,t){e.exports=function(){let e,t,n,o,a,i;function r(){n=Date.now(),(a=n-o)>e&&(o=n-a%e,i()),requestAnimationFrame(r)}return{startAnimating:function(n,a){i=a,imgHasChanged=!0,e=1e3/n,o=Date.now(),t=o,r()}}}()},function(e,t){e.exports=function(){function e(e,t){return t.extension.toUpperCase()===e.toUpperCase()}function t(e){return new Promise((t,n)=>{const o=new XMLHttpRequest;o.responseType="blob",o.onload=(()=>{"200"==o.status?t(o.response):n(o.statusText)}),o.onerror=(()=>n(o.statusText)),o.open("GET",e),o.send()})}return{readMultipleFiles:function(n,o){let a,i={},r={};var l;function s(o,a,r){return new Promise((l,s)=>{Promise.resolve().then(e=>{if(void 0!==o[r])return console.log(r+" : Files request..."),function(e,n,o){return new Promise((a,i)=>{e[o]||i("No category with this name ("+o+") in json.");let r=Promise.resolve(),l=[];for(let n=0;n<e[o].length;n++)r=r.then(a=>t("/datafiles/"+e.study+"/"+e[o][n])).then(t=>{e[o][n].split("/").pop(),l.push(new File([t],e[o][n].split("/").pop()))});r=r.then(e=>{n[o]=l,a()})})}(o,a,r)}).then(t=>{if(void 0!==o[r])return console.log(r+" : Files loading..."),function(t,o){return new Promise((a,r)=>{const l=[],s=[],d={};let c;for(let n=0;n<t[o].length;n++){let a=AMI.UtilsCore.parseUrl(t[o][n].name);e("mhd",a)?(d.header=t[o][n],c=!0):e("raw",a)?d.data=t[o][n]:s.push(t[o][n])}if(void 0!==c)void 0===d.header||void 0===d.data?r("Data seems to be 'header (mhd) + data (raw)' but data can't be found !"):l.push(function(e,t){const o=[];for(let t in e)o.push(new Promise((n,o)=>{const a=new FileReader;a.onload=(e=>{n(e.target.result)}),a.readAsArrayBuffer(e[t])}).then(function(n){return{url:e[t].name,buffer:n}}));return Promise.all(o).then(e=>n.parse(e)).then(function(e){i[t]=[],i[t].push(e)}).catch(function(e){window.console.log("oops... something went wrong while parsing the sequence..."),window.console.log(e)})}(d,o));else for(let e=0;e<s.length;e++)l.push(u(e,s,o));Promise.all(l).then(function(){a(i)}).catch(function(e){window.console.log(e),r("oops... something went wrong while using the sequence...")})})}(a,r)}).then(e=>{l()})})}function u(e,t,o){return Promise.resolve().then(function(){return new Promise(function(n,o){const a=new FileReader;a.addEventListener("load",function(e){n(e.target.result)}),a.readAsArrayBuffer(t[e])})}).then(function(o){return n.parse({url:t[e].name,buffer:o})}).then(function(e){i[o]=[],i[o].push(e)}).catch(function(e){window.console.log("Oops... something went wrong while loading the sequence..."),window.console.log(e)})}Promise.resolve().then(e=>{console.log("Json request...");const t="/"+function(){let e=[],t=window.location.search.substring(1).split("&");for(let n=0,o=t.length;n<o;n++){if(""===t[n])continue;let o=t[n].split("=");"viewer"===decodeURIComponent(o[0])&&(e[decodeURIComponent(o[0])]=decodeURIComponent(o[1]||""))}return e}().viewer;return l=t,new Promise((e,t)=>{const n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.onload=(()=>{"200"==n.status?e(n.responseText):t(n.statusText)}),n.onerror=(()=>t(n.statusText)),n.open("GET",l),n.send()})}).then(e=>{a=JSON.parse(e)}).then(e=>s(a,r,"image")).then(e=>s(a,r,"fusion")).then(e=>{console.log("Files loaded."),o(i)}).catch(e=>{console.log("An error has occured:"),console.log(e)})}}}()},function(e,t,n){const o=n(0),a=n(10),i=n(9),r=n(8),l=n(7),s=n(6);let u,d,c,f,h,v,m,p={hasChanged:!0};window.onload=function(){d=document.getElementById("r3d"),(u=new THREE.WebGLRenderer({antialias:1==o.interpolation,alpha:!0})).setSize(d.offsetWidth,d.offsetHeight),u.setClearColor(o.bgColor,o.bgAlpha),u.setPixelRatio(window.devicePixelRatio),d.appendChild(u.domElement),c=new Stats,d.parentNode.insertBefore(c.domElement,d),f=new s.default(d),v=new AMI.OrthographicCamera(d.clientWidth/-2,d.clientWidth/2,d.clientHeight/2,d.clientHeight/-2,.1,1e4);let e=new AMI.VolumeLoader(d);function t(){v.canvas={width:d.offsetWidth,height:d.offsetHeight},u.setSize(d.offsetWidth,d.offsetHeight),f.resize(),p.hasChanged=!0}a.readMultipleFiles(e,function(n){e.free(),e=null;let a=n.image[0].mergeSeries(n.image)[0].stack[0],s=n.fusion[0].mergeSeries(n.fusion)[0].stack[0];(h=new AMI.StackHelper(a)).bbox.visible=!1,h.border.visible=!1,f.setMainStackHelper(h),f.addLayerStack(s,"fusion"),m=new l.default(v,h,d,p),v.controls=m;let g=f.worldBB,y=new THREE.Vector3((g[1]-g[0])/2,(g[3]-g[2])/2,(g[5]-g[4])/2),x={center:a.worldCenter().clone(),halfDimensions:new THREE.Vector3(y.x+100,y.y+100,y.z+100)},b={width:d.clientWidth,height:d.clientHeight};v.directions=[a.xCosine,a.yCosine,a.zCosine],v.box=x,v.canvas=b,v.update(),v.fitBox(2),r.updateLabels(v.directionsLabel,a.modality),r.buildGUI(h,v,p),window.addEventListener("resize",t,!1),t(),i.startAnimating(o.fps,function(){m.update(),p.hasChanged&&(f.render(u,v),p.hasChanged=!1),c.update()})})}}]);